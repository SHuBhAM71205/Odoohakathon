export type IPv6Address = [number, number, number, number, number, number, number, number];

export class URLSearchParams {
    constructor(
        init?:
            | ReadonlyArray<readonly [name: string, value: string]>
            | Iterable<readonly [name: string, value: string]>
            | { readonly [name: string]: string }
            | string,
    );

    append(name: string, value: string): void;
    delete(name: string): void;
    get(name: string): string | null;
    getAll(name: string): string[];
    has(name: string): boolean;
    set(name: string, value: string): void;
    sort(): void;

    keys(): IterableIterator<string>;
    values(): IterableIterator<string>;
    entries(): IterableIterator<[name: string, value: string]>;
    forEach<THIS_ARG = void>(
        callback: (this: THIS_ARG, value: string, name: string, searchParams: this) => void,
        thisArg?: THIS_ARG,
    ): void;

    readonly [Symbol.toStringTag]: "URLSearchParams";
    [Symbol.iterator](): IterableIterator<[name: string, value: string]>;
}

export function basicURLParse(
    input: string,
    options?: {
        baseURL?: URLRecord | undefined;
        url?: URLRecord | undefined;
        stateOverride?: StateOverride | undefined;
    },
): URLRecord | null;

export function serializeURL(urlRecord: URLRecord, excludeFragment?: boolean): string;

export function serializePath(urlRecord: URLRecord): string;

export function serializeURLOrigin(urlRecord: URLRecord): string;

export function setThePassword(urlRecord: URLRecord, password: string): void;

export function cannotHaveAUsernamePasswordPort(urlRecord: URLRecord): boolean;

export function percentDecodeString(string: string): Uint8Array;

export type TypedArray =
    | Uint8Array
    | Uint8ClampedArray
    | Uint16Array
    | Uint32Array
    | Int8Array
    | Int16Array
    | Int32Array
    | Float32Array
    | Float64Array;
